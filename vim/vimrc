"different setting between different os
if has("win32") || has("win16")
    set rtp+=~/vimfiles/bundle/Vundle.vim/
    let path='~/vimfiles/bundle'
else 
    set rtp+=~/.vim/bundle/Vundle.vim
endif

set nocompatible
filetype plugin indent on
syntax on

" use git protocol by default other than https
"let g:vundle_default_git_proto = 'git'

"==================================================
" plugins
if has("win32") || has("win16")
    call vundle#begin(path)
else 
    call vundle#begin()
endif
"Vundle
Plugin 'gmarik/Vundle.vim'

"snippets
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

" auto closing brackets
Plugin 'jiangmiao/auto-pairs'

" color scheme
Plugin 'BusyBee'
Plugin 'altercation/vim-colors-solarized'
Plugin 'goatslacker/mango.vim'

" status line
Plugin 'bling/vim-airline'

" show marks
Plugin 'kshenoy/vim-signature'

" multiple line edit
Plugin 'terryma/vim-multiple-cursors'

" operate on surroundings
Plugin 'tpope/vim-surround'

" directory tree
Plugin 'scrooloose/nerdtree'

" tagbar
Plugin 'majutsushi/tagbar'
Plugin 'marijnh/tern_for_vim'

Plugin 'tpope/vim-fugitive'

" quick file finder 
Plugin 'kien/ctrlp.vim'

" smooth scroll when pressing ctrl+d or ctrl u
Plugin 'joeytwiddle/sexy_scroller.vim'

" syntax checker
Plugin 'scrooloose/syntastic'

" javascript related
" for the autoformat to work for javascript, first need to install a global
" node modue, npm install -g js-beautify
Plugin 'Chiel92/vim-autoformat'
Plugin 'pangloss/vim-javascript' 

" distinguish json from javascript
Plugin 'elzr/vim-json'

" mark down
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'suan/vim-instant-markdown'

" note taking plugin
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-notes'

" easy motion( move around super fast )
Plugin 'Lokaltog/vim-easymotion'

" local vimrc solution
Plugin 'MarcWeber/vim-addon-local-vimrc'

" for navigation between items in quick fix or location list easier
Plugin 'tpope/vim-unimpaired'


" nodejs plugin
Plugin 'moll/vim-node'
Plugin 'sidorares/node-vim-debugger'


call vundle#end()
"==================================================

"markdown file extension recognization
au BufRead,BufNewFile *.md set filetype=markdown

" allow backspace to delete auto indention , line breaks, and the start of
" insertion
set backspace=indent,start

" always show status line
set laststatus=2

" no swap file
set noswapfile

" turn on wildmenu
set wildmenu

" access system clipboard
set clipboard=unnamed

" search ignore case by default
set ic

" highlight search
set hls

" increment search
set is

" map leader to space
let mapleader=" "

"no line wrap
set nowrap

" appearence 
set background=light
if &term =~ "^xterm"
    let g:solarized_termcolors=256
endif
colorscheme solarized
set number
set showcmd
set cursorline

" indention
set smartindent
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" code format
nmap <leader>f :Autoformat<cr>

" ctrlp settings
let g:ctrlp_working_path_mode=0  
let g:ctrlp_max_files=0
let g:ctrlp_max_height=20
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/](\.(git|hg|svn)|node_modules)$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ 'link': 'some_bad_symbolic_links',
            \ }


" notes directory
let g:notes_directories = ['~/junshen/gitrepo/notes']

" syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_javascript_checkers = ["eslint"]
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0


" toggle tag bar
nmap <leader>tb :TagbarToggle<CR>

" quick insert semicolon at the end of the line
nmap <leader>; A;<Esc>

" for not to lose the yanked text after pasting over selection
xnoremap p pgvy

" nerdtree 
nmap  <leader>nd :NERDTreeToggle<cr>
let g:NERDTreeShowHidden=1

" multi-cursor configuration
let g:multi_cursor_exit_from_insert_mode = 0

" use node to execute js code directly and output to shell directly
nmap <leader>node :Node %<cr>

" easy motion highlighting color
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

hi link EasyMotionTarget2First ErrorMsg
hi link EasyMotionTarget2Second ErrorMsg

"cursor shape change in different mode in iterm2
if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
elseif &term =~ "^xterm"
    let &t_SI .= "\<Esc>[5 q"
    let &t_EI .= "\<Esc>[2 q"
endif

" script to output shell command output to a new buffer in a separate window 
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
    let isfirst = 1
    let words = []
    for word in split(a:cmdline)
        if isfirst
            let isfirst = 0  " don't change first word (shell command)
        else
            if word[0] =~ '\v[%#<]'
                let word = expand(word)
            endif
            let word = shellescape(word, 1)
        endif
        call add(words, word)
    endfor
    let expanded_cmdline = join(words)
    botright new
    setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
    call setline(1, 'You entered:  ' . a:cmdline)
    call setline(2, 'Expanded to:  ' . expanded_cmdline)
    call append(line('$'), substitute(getline(2), '.', '=', 'g'))
    silent execute '$read !'. expanded_cmdline
    1
endfunction
command! -complete=file -nargs=* Node call s:RunShellCommand('node '.<q-args>)
